/*
 * This file is generated by jOOQ.
 */
package ru.xpendence.jooqexample.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.xpendence.jooqexample.domain.Indexes;
import ru.xpendence.jooqexample.domain.Keys;
import ru.xpendence.jooqexample.domain.Public;
import ru.xpendence.jooqexample.domain.tables.records.CitiesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cities extends TableImpl<CitiesRecord> {

    private static final long serialVersionUID = 335476952;

    /**
     * The reference instance of <code>public.cities</code>
     */
    public static final Cities CITIES = new Cities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CitiesRecord> getRecordType() {
        return CitiesRecord.class;
    }

    /**
     * The column <code>public.cities.id</code>.
     */
    public final TableField<CitiesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('cities_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.cities.country_id</code>.
     */
    public final TableField<CitiesRecord, Long> COUNTRY_ID = createField(DSL.name("country_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.cities.name</code>.
     */
    public final TableField<CitiesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.cities</code> table reference
     */
    public Cities() {
        this(DSL.name("cities"), null);
    }

    /**
     * Create an aliased <code>public.cities</code> table reference
     */
    public Cities(String alias) {
        this(DSL.name(alias), CITIES);
    }

    /**
     * Create an aliased <code>public.cities</code> table reference
     */
    public Cities(Name alias) {
        this(alias, CITIES);
    }

    private Cities(Name alias, Table<CitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cities(Name alias, Table<CitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Cities(Table<O> child, ForeignKey<O, CitiesRecord> key) {
        super(child, key, CITIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CITIES_PKEY);
    }

    @Override
    public Identity<CitiesRecord, Long> getIdentity() {
        return Keys.IDENTITY_CITIES;
    }

    @Override
    public UniqueKey<CitiesRecord> getPrimaryKey() {
        return Keys.CITIES_PKEY;
    }

    @Override
    public List<UniqueKey<CitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<CitiesRecord>>asList(Keys.CITIES_PKEY);
    }

    @Override
    public Cities as(String alias) {
        return new Cities(DSL.name(alias), this);
    }

    @Override
    public Cities as(Name alias) {
        return new Cities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cities rename(String name) {
        return new Cities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cities rename(Name name) {
        return new Cities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
